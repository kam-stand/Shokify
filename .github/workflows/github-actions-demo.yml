name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Kamrul14
          MYSQL_DATABASE: shokify
          MYSQL_USER: shokify_user
          MYSQL_PASSWORD: Kamrul14!
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: client/shokify-frontend/package-lock.json

      # ... all your existing steps until docker-test job ...

  podman-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Install podman-compose
        run: |
          sudo apt-get install -y python3-pip
          pip3 install podman-compose

      - name: Build Podman images
        run: |
          podman build -f Dockerfile.backend -t shokify-backend .
          podman build -f Dockerfile.frontend -t shokify-frontend .

      - name: Run Podman Compose stack
        run: |
          podman-compose up -d
          sleep 30  # Wait for services to start

      - name: Test Podman stack
        run: |
          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "Podman backend is ready!"
              break
            fi
            sleep 10
          done

          # Test backend endpoint
          response=$(curl -s http://localhost:8080/)
          echo "Podman backend response: $response"

          if [ "$response" = "Hello, Shokify!" ]; then
            echo "✅ Podman stack test PASSED!"
          else
            echo "❌ Podman stack test FAILED!"
            exit 1
          fi

      - name: Cleanup Podman
        if: always()
        run: |
          podman-compose down -v || true
          podman system prune -f || true
